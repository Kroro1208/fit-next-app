generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String         @id
  createdAt          DateTime       @default(now())
  email              String
  firstName          String
  imageUrl           String?
  lastName           String
  userName           String?        @unique
  Comment            Comment[]
  createdCommyunitys Community[]
  notification       Notification[]
  posts              Post[]
  Vote               Vote[]
  followers          Follow[]       @relation("Follower")
  following          Follow[]       @relation("Following")
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Follower", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Community {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  User        User?    @relation(fields: [userId], references: [id])
  posts       Post[]
}

model Post {
  id               String         @id @default(uuid())
  title            String
  textContent      Json?
  imageString      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subName          String?
  userId           String?
  downVoteCount    Int            @default(0)
  shareLinkVisible Boolean        @default(false)
  trustScore       Float          @default(0)
  upVoteCount      Int            @default(0)
  Comment          Comment[]
  notification     Notification[]
  Community        Community?     @relation(fields: [subName], references: [name])
  User             User?          @relation(fields: [userId], references: [id])
  Vote             Vote[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Vote {
  id       String     @id @default(uuid())
  postId   String?
  userId   String?
  voteType TypeOfVote
  Post     Post?      @relation(fields: [postId], references: [id])
  User     User?      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  userId    String?
  postId    String?
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
}

enum TypeOfVote {
  UP
  DOWN
}
